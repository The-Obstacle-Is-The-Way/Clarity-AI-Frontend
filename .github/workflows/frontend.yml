name: Frontend CI/CD

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'frontend/**'
  # Allow manual triggering
  workflow_dispatch:

jobs:
  typescript-checks:
    name: TypeScript Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Apply TypeScript fixes
        working-directory: frontend
        run: |
          # Apply ThemeContext Settings Fix
          node scripts/fix-theme-context.js
          
          # Run additional TS fixes
          node scripts/apply-typescript-fixes.js
      
      - name: TypeScript type checking
        working-directory: frontend
        run: npm run type-check
  
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint
  
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [typescript-checks, lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run unit tests
        working-directory: frontend
        run: npm test -- --coverage
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-coverage
          path: frontend/coverage
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Production build
        working-directory: frontend
        run: NODE_OPTIONS="--max-old-space-size=4096" npm run build -- --config vite.config.prod.enhanced.ts
      
      - name: Analyze bundle size
        working-directory: frontend
        run: npx vite-bundle-visualizer
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      
      - name: Upload build analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: frontend/build-analysis
  
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Install Cypress
        working-directory: frontend
        run: npm install cypress
      
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      
      - name: Start local server
        working-directory: frontend
        run: npx vite preview --port 4173 &
      
      - name: Run Cypress tests
        working-directory: frontend
        run: npx cypress run
  
  a11y-testing:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      
      - name: Start local server
        working-directory: frontend
        run: npx vite preview --port 4173 &
      
      - name: Run axe accessibility tests
        working-directory: frontend
        run: npx axe-cli http://localhost:4173 --exit
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-tests, a11y-testing]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to S3
        run: |
          aws s3 sync frontend/dist/ s3://novamind-staging/ --delete
      
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }} --paths "/*"
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e-tests, a11y-testing]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to S3
        run: |
          aws s3 sync frontend/dist/ s3://novamind-production/ --delete
      
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION }} --paths "/*"