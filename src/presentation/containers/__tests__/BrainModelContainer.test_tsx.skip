/**
 * NOVAMIND Testing Framework
 * BrainModelContainer Component Tests
 *
 * These tests follow a clean, modular approach for testing the neural visualization
 * components with proper isolation and reliability.
 */
// Removed unused React import
import { describe, it, expect, beforeEach, vi } from 'vitest'; // Import vi
import { screen } from '@testing-library/react'; // Removed unused render
import BrainModelContainer from '@organisms/BrainModelContainer.tsx'; // Use correct alias and add .tsx extension
import { renderWithProviders } from '@test/test-utils.unified';

// Mock useContextBridge as it might cause issues in JSDOM
vi.mock('@react-three/drei', async (importOriginal) => {
  const actual = (await importOriginal()) as any;
  return {
    ...actual,
    useContextBridge: () => (props: any) => props.children, // Simple pass-through mock
  };
});

// Removed unused mockBrainRegions variable

// Add the data-testid attribute to the test component wrapper
// This test uses the root element of the BrainModelContainer by data-testid
// Make sure the BrainModelContainer renders a root element with:
// <div data-testid="brain-model-container-root" className={...}>

describe.skip('BrainModelContainer', () => { // Skip R3F component tests in Vitest
  // Re-enable test suite
  beforeEach(() => {
    // Make the test fully reproducible by resetting mocks
    // vi.clearAllMocks(); // Consider if mocks are needed and clear appropriately
  });

  it('renders without crashing', () => {
    // Add necessary mock props based on BrainModelContainer's definition
    const mockProps = {
      patientId: 'test-patient-123', // Example prop
      // Add other required props here
    };
    renderWithProviders(<BrainModelContainer {...mockProps} />);

    // Check for the container element to be in the document
    const containerElement = screen.getByTestId('brain-model-container-root');
    expect(containerElement).toBeInTheDocument();
  });

  // Add more tests as visualization implementation stabilizes
});
