# Novamind Digital Twin: UI Implementation Rules

## Component Architecture

1. **Atomic Design**
   ```
   atoms/          # Basic UI elements (Button, Input, etc.)
   molecules/      # Simple combinations (SearchBar, Card, etc.)
   organisms/      # Complex components (Header, Sidebar, etc.)
   templates/      # Page layouts (DashboardLayout, etc.)
   pages/          # Full pages (Dashboard, Settings, etc.)
   ```

2. **Component Rules**
   - Single Responsibility Principle
   - Props interface with JSDoc
   - Explicit return type
   - Error boundary wrapper
   - Loading state handling

3. **Performance**
   ```typescript
   // ✅ Memoize expensive components
   export const BrainRegion = memo(({ data }: Props) => {
     // Implementation
   });

   // ✅ Memoize callbacks
   const handleUpdate = useCallback((id: string) => {
     // Implementation
   }, []);

   // ✅ Memoize expensive computations
   const processedData = useMemo(() => {
     return heavyComputation(data);
   }, [data]);
   ```

## Tailwind Implementation

1. **Class Organization**
   ```tsx
   // ✅ Logical grouping
   <div className={clsx(
     // Layout
     'grid grid-cols-12 gap-4',
     // Typography
     'text-base font-medium text-gray-900',
     // Colors & Effects
     'bg-white shadow-lg',
     // Interactivity
     'hover:bg-gray-50 focus:ring-2',
     // Responsive
     'md:grid-cols-6 lg:grid-cols-4'
   )}>
   ```

2. **Custom Classes**
   ```css
   @layer components {
     .neural-card {
       @apply rounded-lg bg-white shadow-xl p-6;
       @apply hover:shadow-2xl transition-shadow;
       @apply dark:bg-gray-800 dark:text-white;
     }
   }
   ```

3. **Theme Extensions**
   ```js
   // tailwind.config.cjs
   module.exports = {
     theme: {
       extend: {
         colors: {
           neural: {
            active: '#FF5E5B',
            inactive: '#373737'
          }
         }
       }
     }
   }
   ```

## State Management

1. **Local State**
   ```typescript
   // ✅ Use for UI state
   const [isOpen, setIsOpen] = useState(false);
   ```

2. **Complex State**
   ```typescript
   // ✅ Use reducers for complex logic
   const [state, dispatch] = useReducer(brainModelReducer, initialState);
   ```

3. **Form State**
   ```typescript
   // ✅ Use React Hook Form
   const { register, handleSubmit } = useForm<PatientData>();
   ```

## Performance Optimization

1. **Virtualization**
   ```typescript
   // ✅ Use for long lists
   import { FixedSizeList } from 'react-window';
   
   <FixedSizeList
     height={400}
     width={600}
     itemCount={1000}
     itemSize={50}
   >
     {Row}
   </FixedSizeList>
   ```

2. **Code Splitting**
   ```typescript
   // ✅ Lazy load components
   const BrainVisualizer = lazy(() => 
     import('@presentation/organisms/BrainVisualizer')
   );
   ```

3. **Resource Cleanup**
   ```typescript
   // ✅ Always cleanup
   useEffect(() => {
     const subscription = subscribe();
     return () => subscription.unsubscribe();
   }, []);
   ```

## Three.js Integration

1. **Scene Setup**
   ```typescript
   // ✅ Proper scene management
   const BrainScene = () => (
     <Canvas>
       <React.Suspense fallback={<Loader />}>
         <BrainModel />
         <Effects />
         <Controls />
       </React.Suspense>
     </Canvas>
   );
   ```

2. **Performance**
   ```typescript
   // ✅ Use instances for repeated elements
   const Neurons = memo(({ data }) => (
     <InstancedMesh count={data.length}>
       <sphereGeometry args={[0.1, 32, 32]} />
       <neuronMaterial />
     </InstancedMesh>
   ));
   ```

3. **Resource Management**
   ```typescript
   // ✅ Dispose resources
   useEffect(() => {
     return () => {
       geometry.dispose();
       material.dispose();
       texture.dispose();
     };
   }, []);
   ```

## HIPAA Compliance

1. **Data Display**
   ```typescript
   // ✅ Mask sensitive data
   const PatientInfo = ({ data }: Props) => (
     <div>
       <MaskedField value={data.ssn} />
       <RedactedText text={data.notes} />
     </div>
   );
   ```

2. **Form Handling**
   ```typescript
   // ✅ Secure form submission
   const onSubmit = async (data: PatientData) => {
     await secureApiClient.post('/patients', data);
   };
   ```

## Error Handling

1. **Component Errors**
   ```typescript
   // ✅ Use error boundaries
   const VisualizationErrorBoundary = ({
     children
   }: PropsWithChildren) => (
     <ErrorBoundary
       fallback={<ErrorFallback />}
       onError={logError}
     >
       {children}
     </ErrorBoundary>
   );
   ```

2. **Async Errors**
   ```typescript
   // ✅ Handle loading states
   const { data, error, isLoading } = useQuery({
     queryKey: ['brainModel', id],
     queryFn: () => fetchBrainModel(id)
   });
   ```
